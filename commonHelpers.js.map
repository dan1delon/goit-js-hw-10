{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css'; \n\n\nconst timer = document.querySelector('.timer');\nconst spanDays = timer.querySelector('div span[data-days]');\nconst spanHours = timer.querySelector('div span[data-hours]');\nconst spanMinutes = timer.querySelector('div span[data-minutes]');\nconst spanSeconds = timer.querySelector('div span[data-seconds]');\nconst button = document.querySelector('button');\nlet userSelectedDate;\nbutton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n      const selectedDate = selectedDates[0];\n      \n      if (selectedDate < Date.now()) {\n        return iziToast.error({\n          title: 'Error',\n          message: 'Please choose a date in the future',\n          position: \"topCenter\",\n        });\n      } else {\n          button.disabled = false;\n          userSelectedDate = selectedDate;\n      }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nbutton.addEventListener('click', startTimer);\n\n\nfunction startTimer() {\n  button.disabled = true;\n\n  const intervalId = setInterval(() => {\n\n    const currentTime = Date.now();\n    const difference = convertMs(userSelectedDate - currentTime);\n    addTime(difference);\n    const values = Object.values(difference);\n    if (values.every(value => value === 0)) {\n      clearInterval(intervalId)\n    }\n    }, 1000);\n}\n\nfunction addTime({ days, hours, minutes, seconds }) {\n  spanDays.textContent = addZero(days);\n  spanHours.textContent = addZero(hours);\n  spanMinutes.textContent = addZero(minutes);\n  spanSeconds.textContent = addZero(seconds);\n}\n\nfunction addZero(num) {\n  return num.toString().padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}"],"names":["timer","spanDays","spanHours","spanMinutes","spanSeconds","button","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","startTimer","intervalId","currentTime","difference","convertMs","addTime","value","days","hours","minutes","seconds","addZero","num","ms"],"mappings":"sGAMA,MAAMA,EAAQ,SAAS,cAAc,QAAQ,EACvCC,EAAWD,EAAM,cAAc,qBAAqB,EACpDE,EAAYF,EAAM,cAAc,sBAAsB,EACtDG,EAAcH,EAAM,cAAc,wBAAwB,EAC1DI,EAAcJ,EAAM,cAAc,wBAAwB,EAC1DK,EAAS,SAAS,cAAc,QAAQ,EAC9C,IAAIC,EACJD,EAAO,SAAW,GAElB,MAAME,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,MAAMC,EAAeD,EAAc,GAEnC,GAAIC,EAAe,KAAK,MACtB,OAAOC,EAAS,MAAM,CACpB,MAAO,QACP,QAAS,qCACT,SAAU,WACpB,CAAS,EAECL,EAAO,SAAW,GAClBC,EAAmBG,CAE1B,CACH,EAEAE,EAAU,mBAAoBJ,CAAO,EAErCF,EAAO,iBAAiB,QAASO,CAAU,EAG3C,SAASA,GAAa,CACpBP,EAAO,SAAW,GAElB,MAAMQ,EAAa,YAAY,IAAM,CAEnC,MAAMC,EAAc,KAAK,MACnBC,EAAaC,EAAUV,EAAmBQ,CAAW,EAC3DG,EAAQF,CAAU,EACH,OAAO,OAAOA,CAAU,EAC5B,MAAMG,GAASA,IAAU,CAAC,GACnC,cAAcL,CAAU,CAEzB,EAAE,GAAI,CACX,CAEA,SAASI,EAAQ,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAClDrB,EAAS,YAAcsB,EAAQJ,CAAI,EACnCjB,EAAU,YAAcqB,EAAQH,CAAK,EACrCjB,EAAY,YAAcoB,EAAQF,CAAO,EACzCjB,EAAY,YAAcmB,EAAQD,CAAO,CAC3C,CAEA,SAASC,EAAQC,EAAK,CACpB,OAAOA,EAAI,SAAU,EAAC,SAAS,EAAG,GAAG,CACvC,CAEA,SAASR,EAAUS,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}